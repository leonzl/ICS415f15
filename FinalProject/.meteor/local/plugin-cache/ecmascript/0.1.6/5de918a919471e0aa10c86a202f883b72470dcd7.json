{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"Template.messages.helpers({\n\tmessages: Messages.find({})\n});\n\nAccounts.ui.config({\n\tpasswordSignupFields: 'USERNAME_AND_EMAIL'\n});\n\nTemplate.loginButtons.events({\n\t'submit #login-form': function (e, t) {\n\t\te.preventDefault();\n\t\t// retrieve the input field values\n\t\tvar email = t.find('#login-email').value;\n\t\tvar password = t.find('#login-password').value;\n\n\t\t// Trim and validate your fields here....\n\n\t\t// If validation passes, supply the appropriate fields to the\n\t\t// Meteor.loginWithPassword() function.\n\t\tMeteor.loginWithPassword(email, password, function (err) {\n\t\t\tif (err) {}\n\t\t\t// The user might not have been found, or their passwword\n\t\t\t// could be incorrect. Inform the user that their\n\t\t\t// login attempt has failed.\n\t\t\telse {}\n\t\t\t// The user has been logged in.\n\t\t});\n\t\treturn false;\n\t}\n});\n\nTemplate.register.events({\n\t'submit #register-form': function (e, t) {\n\t\te.preventDefault();\n\t\tvar email = t.find('#account-email').value,\n\t\t    password = t.find('#account-password').value;\n\n\t\t// Trim and validate the input\n\n\t\tAccounts.createUser({ email: email, password: password }, function (err) {\n\t\t\tif (err) {\n\t\t\t\t// Inform the user that account creation failed\n\t\t\t} else {\n\t\t\t\t\t// Success. Account has been created and the user\n\t\t\t\t\t// has logged in successfully.\n\t\t\t\t}\n\t\t});\n\n\t\treturn false;\n\t}\n});\n\nTemplate.registerHelper(\"timestampToTime\", function (timestamp) {\n\tvar date = new Date(timestamp);\n\tvar hours = date.getHours();\n\tvar minutes = \"0\" + date.getMinutes();\n\tvar seconds = \"0\" + date.getSeconds();\n\treturn hours + ':' + minutes.substr(minutes.length - 2) + ':' + seconds.substr(seconds.length - 2);\n});\n\nTemplate.registerHelper(\"usernameFromId\", function (userId) {\n\tvar user = Meteor.users.findOne({ _id: userId });\n\tif (typeof user === \"undefined\") {\n\t\treturn \"Anonymous\";\n\t}\n\tif (typeof user.services.github !== \"undefined\") {\n\t\treturn user.services.github.username;\n\t}\n\treturn user.username;\n});\n\nMeteor.subscribe('messages');\nMeteor.subscribe('allUsernames');","ast":null,"map":{"version":3,"sources":["/client/app.js"],"names":[],"mappings":"AAAA,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC;AACxB,SAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;CAC5B,CAAC,CAAC;;AAEH,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;AACf,qBAAoB,EAAE,oBAAoB;CAC7C,CAAC,CAAA;;AAEF,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC;AAC5B,qBAAoB,EAAG,UAAS,CAAC,EAAE,CAAC,EAAC;AACpC,GAAC,CAAC,cAAc,EAAE,CAAC;;AAEnB,MAAI,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC;AACzC,MAAI,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,KAAK,CAAC;;;;;;AAM/C,QAAM,CAAC,iBAAiB,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAS,GAAG,EAAC;AACtD,OAAI,GAAG,EAAE,EAAE;;;;QAIN,EAAE;;GAEP,CAAC,CAAC;AACH,SAAO,KAAK,CAAC;EACb;CACD,CAAC,CAAC;;AAEH,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC;AACxB,wBAAuB,EAAG,UAAS,CAAC,EAAE,CAAC,EAAE;AACxC,GAAC,CAAC,cAAc,EAAE,CAAC;AACnB,MAAI,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,KAAK;MACvC,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,KAAK,CAAC;;;;AAIhD,UAAQ,CAAC,UAAU,CAAC,EAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAG,QAAQ,EAAC,EAAE,UAAS,GAAG,EAAC;AACrE,OAAI,GAAG,EAAE;;IAER,MAAM;;;KAGN;GAED,CAAC,CAAC;;AAEH,SAAO,KAAK,CAAC;EACb;CACD,CAAC,CAAC;;AAEH,QAAQ,CAAC,cAAc,CAAC,iBAAiB,EAAE,UAAU,SAAS,EAAE;AAC/D,KAAI,IAAI,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC;AAC/B,KAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;AAC5B,KAAI,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;AACtC,KAAI,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;AACtC,QAAO,KAAK,GAAG,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,GAAC,CAAC,CAAC,GAAG,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC;CAC/F,CAAC,CAAC;;AAEH,QAAQ,CAAC,cAAc,CAAC,gBAAgB,EAAE,UAAU,MAAM,EAAE;AAC3D,KAAI,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,EAAC,GAAG,EAAE,MAAM,EAAC,CAAC,CAAC;AAC/C,KAAI,OAAO,IAAI,KAAK,WAAW,EAAE;AAChC,SAAO,WAAW,CAAC;EACnB;AACD,KAAI,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,WAAW,EAAE;AAChD,SAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC;EACrC;AACD,QAAO,IAAI,CAAC,QAAQ,CAAC;CACrB,CAAC,CAAC;;AAEH,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;AAC7B,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC","file":"/client/app.js.map","sourcesContent":["Template.messages.helpers({\n  messages: Messages.find({})\n});\n\nAccounts.ui.config({\n    passwordSignupFields: 'USERNAME_AND_EMAIL'\n})\n\nTemplate.loginButtons.events({\n\t'submit #login-form' : function(e, t){\n\t\te.preventDefault();\n\t\t// retrieve the input field values\n\t\tvar email = t.find('#login-email').value;\n\t\tvar password = t.find('#login-password').value;\n\n\t\t// Trim and validate your fields here....\n\n\t\t// If validation passes, supply the appropriate fields to the\n\t\t// Meteor.loginWithPassword() function.\n\t\tMeteor.loginWithPassword(email, password, function(err){\n\t\t\tif (err) {}\n\t\t\t// The user might not have been found, or their passwword\n\t\t\t// could be incorrect. Inform the user that their\n\t\t\t// login attempt has failed.\n\t\t\telse {}\n\t\t\t// The user has been logged in.\n\t\t});\n\t\treturn false;\n\t}\n});\n\nTemplate.register.events({\n\t'submit #register-form' : function(e, t) {\n\t\te.preventDefault();\n\t\tvar email = t.find('#account-email').value\n\t\t\t, password = t.find('#account-password').value;\n\n\t\t// Trim and validate the input\n\n\t\tAccounts.createUser({email: email, password : password}, function(err){\n\t\t\tif (err) {\n\t\t\t\t// Inform the user that account creation failed\n\t\t\t} else {\n\t\t\t\t// Success. Account has been created and the user\n\t\t\t\t// has logged in successfully.\n\t\t\t}\n\n\t\t});\n\n\t\treturn false;\n\t}\n});\n\nTemplate.registerHelper(\"timestampToTime\", function (timestamp) {\n\tvar date = new Date(timestamp);\n\tvar hours = date.getHours();\n\tvar minutes = \"0\" + date.getMinutes();\n\tvar seconds = \"0\" + date.getSeconds();\n\treturn hours + ':' + minutes.substr(minutes.length-2) + ':' + seconds.substr(seconds.length-2);\n});\n\nTemplate.registerHelper(\"usernameFromId\", function (userId) {\n\tvar user = Meteor.users.findOne({_id: userId});\n\tif (typeof user === \"undefined\") {\n\t\treturn \"Anonymous\";\n\t}\n\tif (typeof user.services.github !== \"undefined\") {\n\t\treturn user.services.github.username;\n\t}\n\treturn user.username;\n});\n\nMeteor.subscribe('messages');\nMeteor.subscribe('allUsernames');"]},"hash":"5de918a919471e0aa10c86a202f883b72470dcd7"}
