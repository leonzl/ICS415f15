{"version":3,"sources":["meteor://ðŸ’»app/packages/dburles_factory/packages/dburles_factory.js"],"names":[],"mappingsfile":"/packages/dburles_factory.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/dburles:factory/lib/factory.js                                       //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\nvar factories = {};                                                              // 1\n                                                                                 // 2\nFactory = function(name, collection, attributes) {                               // 3\n  this.name = name;                                                              // 4\n  this.collection = collection;                                                  // 5\n  this.attributes = attributes;                                                  // 6\n  this.afterHooks = [];                                                          // 7\n  this.sequence = 0;                                                             // 8\n};                                                                               // 9\n                                                                                 // 10\nFactory.define = function(name, collection, attributes) {                        // 11\n  factories[name] = new Factory(name, collection, attributes);                   // 12\n  return factories[name];                                                        // 13\n};                                                                               // 14\n                                                                                 // 15\nFactory.get = function(name) {                                                   // 16\n  var factory = factories[name];                                                 // 17\n  if (! factory) throw new Error(\"Factory: There is no factory named \" + name);  // 18\n  return factory;                                                                // 19\n};                                                                               // 20\n                                                                                 // 21\nFactory.build = function(name, attributes, options) {                            // 22\n  var factory = Factory.get(name);                                               // 23\n  var base = {};                                                                 // 24\n  attributes = attributes || {};                                                 // 25\n  options = options || {};                                                       // 26\n                                                                                 // 27\n  // \"raw\" attributes without functions evaluated, or dotted properties resolved // 28\n  attributes = _.extend(base, factory.attributes, attributes);                   // 29\n                                                                                 // 30\n  var result = {};                                                               // 31\n                                                                                 // 32\n  // either create a new factory and return its _id                              // 33\n  // or return a 'fake' _id (since we're not inserting anything)                 // 34\n  var makeRelation = function(name) {                                            // 35\n    if (options.insert)                                                          // 36\n      return Factory.create(name)._id;                                           // 37\n    else                                                                         // 38\n      // fake an id on build                                                     // 39\n      return Random.id();                                                        // 40\n  };                                                                             // 41\n                                                                                 // 42\n  factory.sequence += 1;                                                         // 43\n                                                                                 // 44\n  var walk = function(record, object) {                                          // 45\n    _.each(object, function(value, key) {                                        // 46\n      // is this a Factory instance?                                             // 47\n      if (value instanceof Factory) {                                            // 48\n        value = makeRelation(value.name);                                        // 49\n      } else if (_.isFunction(value)) {                                          // 50\n        var fnRes = value.call(result, {                                         // 51\n          sequence: function(fn) {                                               // 52\n            return fn(factory.sequence);                                         // 53\n          }                                                                      // 54\n        });                                                                      // 55\n        // does executing this function return a Factory instance?               // 56\n        value = (fnRes instanceof Factory) ? makeRelation(fnRes.name) : fnRes;   // 57\n      // if an object literal is passed in, traverse deeper into it              // 58\n      } else if (Object.prototype.toString.call(value) === '[object Object]') {  // 59\n        record[key] = record[key] || {};                                         // 60\n        return walk(record[key], value);                                         // 61\n      }                                                                          // 62\n                                                                                 // 63\n      var modifier = { $set: {} };                                               // 64\n      modifier.$set[key] = value;                                                // 65\n                                                                                 // 66\n      LocalCollection._modify(record, modifier);                                 // 67\n    });                                                                          // 68\n  };                                                                             // 69\n                                                                                 // 70\n  walk(result, attributes);                                                      // 71\n                                                                                 // 72\n  result._id = Random.id();                                                      // 73\n  return result;                                                                 // 74\n};                                                                               // 75\n                                                                                 // 76\nFactory._create = function(name, doc) {                                          // 77\n  var collection = Factory.get(name).collection;                                 // 78\n  var insertId = collection.insert(doc);                                         // 79\n  var record = collection.findOne(insertId);                                     // 80\n  return record;                                                                 // 81\n};                                                                               // 82\n                                                                                 // 83\nFactory.create = function(name, attributes) {                                    // 84\n  attributes = attributes || {};                                                 // 85\n  var doc = Factory.build(name, attributes, { insert: true });                   // 86\n  var record = Factory._create(name, doc);                                       // 87\n                                                                                 // 88\n  _.each(Factory.get(name).afterHooks, function(cb) {                            // 89\n    cb(record);                                                                  // 90\n  });                                                                            // 91\n                                                                                 // 92\n  return record;                                                                 // 93\n};                                                                               // 94\n                                                                                 // 95\nFactory.extend = function(name, attributes) {                                    // 96\n  attributes = attributes || {};                                                 // 97\n  return _.extend(_.clone(Factory.get(name).attributes), attributes);            // 98\n};                                                                               // 99\n                                                                                 // 100\nFactory.prototype.after = function(fn) {                                         // 101\n  this.afterHooks.push(fn);                                                      // 102\n  return this;                                                                   // 103\n};                                                                               // 104\n                                                                                 // 105\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}